#!/usr/bin/perl -w

# Programa suskaičiuoja pateiktuose failuose esančių peptidų
# phi ir psi kampus ir juos išveda į standartinę išvestį.

# Programos paleidimas: pdbcenter 1zyx.pdb [2zyx.pdb ...]

use strict;
use warnings;


# sub dihedralAngle($v1, $v2, $v3, $v4){
# 	$b1 = $v1 - $v2;
# 	$b2 = $v3 - $v2;
# 	$b3 = $v4 - $v3;

# 	$n1 = crossProduct($b1, $c1);
# 	$n2 = crossProduct($b2, $b3);

# 	return dotProduct($n1, $n2) / vectorLenght($n1) * vectorLenght($n2);

# }

sub unitVector {
	my @vector = @_;

	my @result = ();
	my $vectorLength = 0;
	for my $i(@vector){
		$vectorLength += $i * $i;  
	}

	for my $item(@vector){
		push(@result, $item/sqrt($vectorLength));
	}

	return @result;
}

sub substractVectors (\@\@) {
    my ($aRef, $bRef) = @_;
    my @result = ();

    my $idx = 0;
    my $bItem = 0;
    foreach my $aItem (@{ $aRef }) {
        $bItem = $bRef->[$idx++];
        push (@result, ($aItem - $bItem));
    }
    return @result;

}

sub crossProduct (\@\@) {
	my ( $first, $second ) = @_;
	my @u = ();
	my @v = ();
    my @result = ();

    my $idx = 0;
    my $secondItem = 0;
    foreach my $firstItem (@{ $first }) {
        $secondItem = $second->[$idx++];
        push (@u, $firstItem);
		push (@v, $secondItem);
    }

	my $a = $u[1] * $v[2] - $v[1] * $u[2];
	my $b = $u[0] * $v[2] - $v[0] * $u[2];
	my $c = $u[0] * $v[1] - $v[0] * $u[1];
	@result =  ($a, $b, $c);
    return @result;
}

sub dotProduct(\@\@){
	my ($aRef, $bRef) = @_;
    my $result = 0;

    my $idx = 0;
    my $bItem = 0;
    foreach my $aItem (@{ $aRef }) {
        $bItem = $bRef->[$idx++];
        $result += $aItem * $bItem;
    }

    return $result;

}


my $currentId = '$Id: pdbphipsi 1110 2017-04-25 07:42:17Z Gintvilė_Bergerytė $';
print "# ", $currentId, "\n";
# my $carbonMass = 12.0107;
my $x = 0;
my $y = 0;
my $z = 0;
my $iterationNumber = 0;
my $lineNr = 0;
# my @alphabet = ('A'..'Z');
my $currentAminoAcid = "";
my @aminoCoordinates = [];
my @carbonCoordinates = [];
my @nitrogenCoord = ();
my @carbonAlphaCoord = [];
my @carbonCoord = [];
my @b1 = [];
# my $x = 0;
while(<>) {
	if(m/^ATOM/) {
		# print $_;
		
		my @components = split /\s+/, $_;
		my @coordinates = @components[6..8]; 
		my @aminoAcid = @components[2..3];
		my @residue = @components[1..2];
		# print $aminoAcid[1], "\n"; 
		print $residue[1]; 
		# print "@coordinates\n";
		$lineNr += 1;
		print $lineNr, "\n";
		if($lineNr < 4){
			# print "yay\n";
			# print "@carbonCoordinates\n";
			if($residue[1] eq "N"){
				print "yay";
				push(@nitrogenCoord, @coordinates);		
				# print "@nitrogenCoord\n";
			}
			elsif($residue[1] eq "CA"){
				push(@carbonAlphaCoord, @coordinates);
			}
			elsif($residue[1] eq "C"){
				push(@carbonCoord, @coordinates);
			}
			# phi skaičiavimas
			# $b1 = $ - $v2;
			# $b2 = $v3 - $v2;
			# $b3 = $v4 - $v3;
			# for( my $i = 0; $i < 3; $i++ ) {
   #      		my $x = $carbonCoordinates[$i] - $nitrogenCoord[$i];
   #      		print $i, $x, " ";
   #      		# push @b1, $x;

   #  		}

			# print "@b1\n";
			@b1 = [];

			# $n1 = crossProduct($b1, $c1);
			# $n2 = crossProduct($b2, $b3);

	# return dotProduct($n1, $n2) / vectorLenght($n1) * vectorLenght($n2);

			# print $phi;
			
		}
		elsif($lineNr == 4){
			# print "@carbonCoordinates\n";
			# print "@nitrogenCoord\n";
			# @u = @carbonCoordinates;
			# print "@u\n";

			my @b1 = substractVectors(@nitrogenCoord, @carbonCoordinates);
			my @b2 = substractVectors(@carbonAlphaCoord, @nitrogenCoord);
			my @b3 = substractVectors(@carbonCoord, @carbonAlphaCoord);
			
			my @n1 = crossProduct(@b1, @b2);
			my @n2 = crossProduct(@b2, @b3);
			print "@n1\n";
			print "@n2\n";
			# my @m1 = crossProduct(@n1, @n2);
			# my @m2 = unitVector(@b2);
			my @m2 = unitVector(@b2);
			print "@m2\n";
			my @m1 = crossProduct(@n1, @m2);
			print "@m1\n";			
			# phi skaičiavimas
			# my $Y = dotProduct(@m1, @m2);
			my $Y = dotProduct(@m1, @n2);  
			my $X = dotProduct(@n1, @n2);

			my $ret_val = atan2 ($Y, $X );
			# print "atan2 of 30/60 is : $ret_val\n";
			@carbonCoordinates = ();
			push(@carbonCoordinates, @carbonCoord);
			# print "@aminoCoordinates\n";
			$currentAminoAcid = $aminoAcid[1];
		}
		elsif(($aminoAcid[1] ne $currentAminoAcid) || eof){
			@nitrogenCoord = ();
			push(@nitrogenCoord, @coordinates);
			@carbonAlphaCoord = ();
			@carbonCoord = ();
			# push(@aminoCoordinates, @coordinates);
			$currentAminoAcid = $aminoAcid[1];
			$lineNr = 0;
		}
		# $x += $coordinates[0];
		# $y += $coordinates[1];
		# $z += $coordinates[2];

	}
}
